#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

# Router:
class GroceryTracker
  include Interactions
  attr_reader :options

  def initialize
    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")

      puts "You asked for: #{search_term}"
      statement = "select purchases.name from purchases where name LIKE '%#{search_term}%'"
      results = database.execute(statement)
      puts results
    elsif options[:command] == "add"
      error_messages = ArgumentParser.validate(options)
      if error_messages.empty?
        purchase = Purchase.new(options)
        purchase.save
        puts "A purchase named #{purchase.name}, with #{purchase.calories} calories and $#{purchase.price} cost was created."
      else
        puts error_messages
      end
    elsif options[:command] == "list"
      list_purchases()
    elsif options[:command] == "edit"
      if purchase = Purchase.find(options[:id])
        purchase.update(options)
        puts "Purchase #{purchase.id} is now named #{purchase.name}, with #{purchase.calories} calories and $#{purchase.price} cost."
      else
        puts "Purchase #{options[:id]} couldn't be found."
      end
    else
      puts "Command not implemented"
    end
  end

  def list_purchases()
    puts "All Purchases:"
    puts Purchase.all
  end
end


grocerytracker = GroceryTracker.new()
grocerytracker.main()
