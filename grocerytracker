#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/parse_arguments'

command = ARGV[0]
options = ParseArguments.parse
options[:name] = ARGV[1]

Environment.environment = options[:environment] || "production"
database = Environment.database_connection

if command == "search"
  puts "What do you want to search for?"
  input = $stdin.gets.chomp
  puts "You asked for: #{input}"
  statement = "select purchases.name from purchases where name LIKE '%#{input}%'"
  results = database.execute(statement)
  puts results
elsif command == "add"
  error_messages = ParseArguments.validate(options)
  if error_messages.empty?
    # This is ripe for a SQL injection attack:
    statement = "insert into purchases(name, calories, price) values('#{options[:name]}', #{options[:calories]}, #{options[:price]})"
    database.execute(statement)
    puts "A purchase named #{options[:name]}, with #{options[:calories]} calories and $#{options[:price]} cost was created."
  else
    puts error_messages
  end
elsif command == "list"
  puts "All Purchases:"
  puts Purchase.all
  # ^equivalent to:
  # Purchase.all.each do |purchase|
  #   print purchase.to_s + "\n"
  # end
else
  puts "Command not implemented"
end
